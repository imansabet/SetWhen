@page "/login"
@inject IAuthApi AuthApi
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthStateService AuthState

<h3 class="text-center my-3">ورود با شماره موبایل</h3>

@if (!otpSent)
{
        <EditForm Model="@phoneModel" OnValidSubmit="SendOtpAsync">
            <InputText @bind-Value="phoneModel.Phone" class="form-control my-2" placeholder="شماره موبایل" />
            <button type="submit" class="btn btn-primary w-100">دریافت کد</button>
        </EditForm>
}
else
{
        <EditForm Model="@otpModel" OnValidSubmit="VerifyOtpAsync">
            <InputText @bind-Value="otpModel.Code" class="form-control my-2" placeholder="کد تایید" />
            <button type="submit" class="btn btn-success w-100">ورود</button>
        </EditForm>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Role { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private RequestOtpDto phoneModel = new();
    private VerifyOtpDto otpModel = new();
    private bool otpSent = false;

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("role", out var role))
        {
            otpModel.Role = role;
        }
    }

    private async Task SendOtpAsync()
    {
        try
        {
            await AuthApi.RequestOtpAsync(phoneModel);
            otpModel.Phone = phoneModel.Phone;
            otpSent = true;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"خطا: {ex.Message}");
        }
    }

    private async Task VerifyOtpAsync()
    {
        try
        {
            var result = await AuthApi.VerifyOtpAsync(otpModel);

            if (!string.IsNullOrEmpty(result.Token))
            {
                await AuthState.LoginAsync(result.Token, result.Role);

                if (!string.IsNullOrWhiteSpace(ReturnUrl))
                    Nav.NavigateTo(ReturnUrl, true);
                else if (result.Role == "Customer")
                    Nav.NavigateTo("/customer/home", true);
                else if (result.Role == "Staff")
                    Nav.NavigateTo("/owner/home", true);
                else
                    Nav.NavigateTo("/", true);
            }

        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "کد نادرست است");
        }
    }
}